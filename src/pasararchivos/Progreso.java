package pasararchivos;

import java.awt.Color;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Locale;

/**
 * @author Facu
 */
public class Progreso extends javax.swing.JFrame {
    ArrayList<Long> promedioVelocidad;
    Transferencia.Modo modo;

    /**
     * Creates new form Transfiriendo
     */
    public Progreso() {
        initComponents();
        
        // Ventana
        setAutoRequestFocus(true);
        setResizable(false);
        setAlwaysOnTop(true);
        setIconImage(Toolkit.getDefaultToolkit().getImage("src/images/icono.png"));
        
        // Variables
        promedioVelocidad = new ArrayList(5);
        modo = Transferencia.Modo.ENVIAR;
    }

    public void setNombre(String archivo) {
        if (modo == Transferencia.Modo.ENVIAR) {
            setTitle("Transfiriendo...");
            txtNombre.setText("Transfiriendo " + archivo);
        }
        else {
            setTitle("Recibiendo...");
            txtNombre.setText("Recibiendo " + archivo);
        }
    }
    
    public void setDatos(long pasados, long total, long velocidad) {
        double progreso = (double) pasados / (double) total;
        
        barraProgreso.setMaximum(1000);
        barraProgreso.setValue((int) (progreso * 1000));
        
        if (promedioVelocidad.size() >= 5) {
            promedioVelocidad.remove(0);
        }
        promedioVelocidad.add(velocidad);
        
        // Si nos envÃ­an velocidad 0, tiene que ser 0. Si no, mostrar promedio.
        if (velocidad > 0) {
            velocidad = 0;
            for (long v: promedioVelocidad) {
                velocidad += v;
            }
            velocidad /= promedioVelocidad.size();
        }
        
        String porcentaje = Math.floor(progreso * 1000) / 10 + "%";
        String mbPasados = getMedida(pasados);
        String mbTotales = getMedida(total);
        String mbps = getMedida(velocidad) + "/s";
        
        txtDatos.setText(porcentaje + " (" + mbPasados + " / " + mbTotales + ") - " + mbps);
        //txtDatos.setText(pasados + " / " + total + " (" + (progreso * 100) + ")");
    }
    
    public void setModo(Transferencia.Modo modo) {
        this.modo = modo;
    }
    
    public String getMedida(long bytes) {
        float bytesF = (float) bytes;
        
        if (bytes < 1000) {
            return bytes + " B";
        }
        else if (bytes < 10000) { // 1 - 10 KB
            return (Math.floor(bytesF / 10) / 100) + " KB";
        }
        else if (bytes < 100000) { // 10 - 100 KB
            return (Math.floor(bytesF / 100) / 10) + " KB";
        }
        else if (bytes < 1000000) { // 100 KB - 1 MB
            return (bytes / 1000) + " KB";
        }
        else if (bytes < 10000000) { // 1 - 10 MB
            return (Math.floor(bytesF / 10000) / 100) + " MB";
        }
        else if (bytes < 100000000) { // 10 - 100 MB
            return (Math.floor(bytesF / 100000) / 10) + " MB";
        }
        else if (bytes < 1000000000) { // 100 MB - 1 GB
            return (bytes / 1000000) + " MB";
        }
        else if (bytes < 10000000000L) { // 1 - 10 GB
            return (Math.floor(bytesF / 10000000) / 100) + " GB";
        }
        else if (bytes < 100000000000L) { // 10 - 100 GB
            return (Math.floor(bytesF / 100000000) / 10) + " GB";
        }
        else if (bytes < 1000000000000L) { // 100 GB - 1 TB
            return (bytes / 1000000000) + " GB";
        }
        else if (bytes < 10000000000000L) { // 1 - 10 TB
            return (Math.floor(bytesF / 10000000000L) / 100) + " TB";
        }
        else if (bytes < 100000000000000L) { // 10 - 100 TB
            return (Math.floor(bytesF / 100000000000L) / 10) + " TB";
        }
        else { // >= 100 TB
            return (bytes / 1000000000000L) + " TB";
        }
    }
    
    @Override
    public void setVisible(boolean visible) {
        if (visible) {
            setLocationRelativeTo(PasarArchivos.panel);
            promedioVelocidad.clear();
        }
        super.setVisible(visible);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        txtNombre = new javax.swing.JLabel();
        barraProgreso = new javax.swing.JProgressBar();
        txtDatos = new javax.swing.JLabel();

        setTitle("Transfiriendo...");

        txtNombre.setText("Transfiriendo Archivo.txt");

        txtDatos.setText("0% (0 MB / 70,8 MB) - 2.3 MB/s");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barraProgreso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre)
                            .addComponent(txtDatos))
                        .addGap(0, 224, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(txtNombre)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barraProgreso, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDatos)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgreso;
    private javax.swing.JLabel txtDatos;
    private javax.swing.JLabel txtNombre;
    // End of variables declaration//GEN-END:variables
}
